#pragma once

#ifndef FIND_ORDER_H
#define FIND_ORDER_H

#include <vector>
#include <map>
#include <iostream>

using namespace std;

/**

    @class   Solution
    @brief   https://leetcode-cn.com/problems/course-schedule-ii/
    @details ~

**/
class Solution {
public:
    Solution() {
        vector<int> tmp = { 1,0 };
        vector<int> tmp1 = { 2,0 };
        vector<int> tmp2 = { 3,1 };
        vector<int> tmp3 = { 3,2 };
        vector < vector<int>> preq = { tmp,tmp1,tmp2,tmp3 };
        auto ret = findOrder(4, preq);
    }


		
			// 存储有向图
			vector<vector<int>> edges;
			// 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成
			vector<int> visited;
			// 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶
			vector<int> result;
			// 判断有向图中是否有环
			bool valid = true;

		public:
			void dfs(int u) {
				// 将节点标记为「搜索中」
				visited[u] = 1;
				// 搜索其相邻节点
				// 只要发现有环，立刻停止搜索
				for (int v : edges[u]) {
					// 如果「未搜索」那么搜索相邻节点
					if (visited[v] == 0) {
						dfs(v);
						if (!valid) {
							return;
						}
					}
					// 如果「搜索中」说明找到了环
					else if (visited[v] == 1) {
						valid = false;
						return;
					}
				}
				// 将节点标记为「已完成」
				visited[u] = 2;
				// 将节点入栈
				result.push_back(u);
			}

			vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
				edges.resize(numCourses);
				visited.resize(numCourses);
				for (const auto& info : prerequisites) {
					edges[info[1]].push_back(info[0]);
				}
				// 每次挑选一个「未搜索」的节点，开始进行深度优先搜索
				for (int i = 0; i < numCourses && valid; ++i) {
					if (!visited[i]) {
						dfs(i);
					}
				}
				if (!valid) {
					return {};
				}
				// 如果没有环，那么就有拓扑排序
				// 注意下标 0 为栈底，因此需要将数组反序输出
				reverse(result.begin(), result.end());
				return result;

		
	}
};

#endif
