#pragma once
#ifndef LENGTH_LONGEST_PATH_H
#define LENGTH_LONGEST_PATH_H

#include <string>
#include <vector>
#include <stack>
#include <map>

using namespace std;

class Solution {
public:
	Solution() {
		auto ret = lengthLongestPath("dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext");
	}

	int lengthLongestPath(string input) {
		int n = input.size();
		int pos = 0;
		int ans = 0;
		stack<int> st;

		while (pos < n) {
			/* 检测当前文件的深度 */
			int depth = 1;
			while (pos < n && input[pos] == '\t') {
				pos++;
				depth++;
			}
			/* 统计当前文件夹或文件名的长度 */
			int len = 0;
			bool isFile = false;
			//
			while (pos < n && input[pos] != '\n') {
				if (input[pos] == '.') {
					isFile = true;
				}
				len++;
				pos++;
			}
			/* 跳过换行符 */
			pos++;
			//栈深度>路径深度时证明当前字符串处于上一级目录下，而非栈顶目录下
			while (st.size() >= depth) {
				st.pop();
			}
			//增加一级目录时，将根目录到当前目录的长度记录下来
			if (!st.empty()) {
				len += st.top() + 1;
			}
			//是文件的话
			if (isFile) {
				ans = max(ans, len);
			}
			else {
				st.emplace(len);
			}
		}
		return ans;
	}
};



#endif